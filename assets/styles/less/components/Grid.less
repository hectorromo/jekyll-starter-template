/*#
  **Core grid component**
 
  The Grid-cell should be combined with a utils-size class for the specific breakpoint you want to target.
  
  DO NOT apply dimension or offset utilities to the `Grid` element. All cell
  widths and offsets should be applied to child grid cells.
  
  **Example uses:**
 
  <div class="Grid Grid--withGutter [Grid--alignCenter|Grid--alignRight|Grid--withGutter]">
    <div class="Grid-cell [Grid-cell--center] u-size1of2 u-bgGray2">1of2</div>
    <div class="Grid-cell u-size1of2 u-bgGray3">1of2</div>
    <div class="Grid-cell u-size1of3 u-bgGray2">1of3</div>
    <div class="Grid-cell u-size2of3 u-bgGray3">2of3</div>
  </div>
 */

/* Grid container
   ========================================================================== */

/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */

.Grid {
    display: block; /* 1 */
    font-size: 0; /* 2 */
    margin: 0; /* 1 */
    padding: 0; /* 1 */
    text-align: left; /* 3 */
}

/**
 * Modifier: center align all grid cells
 */

.Grid--alignCenter {
    text-align: center;
}

/**
 * Modifier: right align all grid cells
 */

.Grid--alignRight {
    text-align: right;
}

/**
 * Modifier: middle-align grid cells
 */

.Grid--alignMiddle > .Grid-cell {
    vertical-align: middle;
}

/**
 * Modifier: bottom-align grid cells
 */

.Grid--alignBottom > .Grid-cell {
    vertical-align: bottom;
}

/**
 * Modifier: gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.Grid--withGutter {
    margin-left: (-0.5px * @gutterSize);
    margin-right: (-0.5px * @gutterSize);
}

.Grid--withOuterGutter {
    margin-left: (0.5px * @gutterSize);
    margin-right: (0.5px * @gutterSize);
}

.Grid--withGutter > .Grid-cell {
    padding-left: (0.5px * @gutterSize);
    padding-right: (0.5px * @gutterSize);
}

/* Extra wide gutters */

.Grid--withWideGutter {
    margin-left: (-1px * @gutterSize);
    margin-right: (-1px * @gutterSize);

    & > .Grid-cell {
        padding-left: (1px * @gutterSize);
        padding-right: (1px * @gutterSize);
    }

    &.Grid--withOuterGutter {
        margin-left: (1px * @gutterSize);
        margin-right: (1px * @gutterSize);
    }
}

/* Gutters above and below a Grid cell */
.Grid--withGutterY > .Grid-cell {
    margin-bottom: @gutterSize;
}

.Grid--withWideGutterY {
    & > .Grid-cell {
    	margin-bottom: (@gutterSize/2);    
	}
}

/* Grid cell
   ========================================================================== */

/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `Grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.Grid-cell {
    box-sizing: border-box;
    display: inline-block; /* 1 */
    font-size: 16px; /* 2 */
    font-size: 0; /* 2 */
    margin-right: 0;
    margin-left: 0;
    padding-right: 0;
    padding-left: 0;
    text-align: left; /* 3 */
    vertical-align: top; /* 4 */
    width: 100%; /* 5 */
}

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */

.Grid-cell--center {
    display: block;
    margin-right: auto;
    margin-left: auto;
}



@media @BreakpointXnarrow {
    .Grid--withGutterY > .Grid-cell {
        margin-bottom: 0;
    }
    
    .Grid--withGutter > .Grid-cell {
        padding-left: 0;
        padding-right: 0; 
    }
}